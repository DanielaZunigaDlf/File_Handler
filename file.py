import base64

def decodificar(image_64_encode:str|bytes, path:str=None):   #decode
    """
    Convierte un base64 en un archivo
    - path: Ruta donde se guardará el archivo
    - image_64_encode: Codigo base64 que se convertirá en un archivo
    """

    if isinstance(image_64_encode, str):
        base64_bytes= image_64_encode.encode() #convierte e bytes
    else:
        base64_bytes = image_64_encode


    image_64_decode = base64.decodebytes(base64_bytes) 
    if path:
        image_result = open(path , 'wb') # create a writable image and write the decoding result
        image_result.write(image_64_decode)
        image_result.close()
    return image_64_decode

def codificar(path:str=None, file_read=None)->str:    #encode
    """
    Convierte un archivo a codigo base64
    - path: Ruta del archivo a convertir
    """
    if path:
        with open(path, 'rb') as file_opened: #open binary file in read mode y la guarda en image
            file_read = file_opened.read()

    image_64_encode = base64.encodebytes(file_read)
    return image_64_encode.decode()

    

if __name__ == "__main__":
    
    base64_image = codificar("C:/Users/Usuario/Desktop/descarga.jpg")
    #
    # print(base64_image)


    decodificar("imagen.jpg", """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""")








